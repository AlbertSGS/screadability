/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.unisannio.readabilitygui;

import com.unisannio.utility.CalculatorMetrics;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;

/**
 *
 * @author Michele Fredella
 */
public class iSCREAM extends javax.swing.JFrame {

    public iSCREAM() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Colonna MT", 3, 48)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("iSCREAM");
        jLabel2.setToolTipText("iSCREAM");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel2.setAutoscrolls(true);
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jButton1.setText("Export csv ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Upload smart contract");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
        ));
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("File");

        jMenuItem2.setText("Upload smart contract");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                .addGap(299, 299, 299)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(32, 32, 32))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ArrayList<Object[]> t;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file save");
        fileChooser.setAcceptAllFileFilterUsed(false);
        String pattern = "dd_M_yyyy_HH-mm-ss";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
        String date = simpleDateFormat.format(new Date());
        fileChooser.setName("Result_" + date);
        fileChooser.setSelectedFile(new File("Result_" + date + ".csv"));
        FileNameExtensionFilter extFilter = new FileNameExtensionFilter("CSV file", "csv");
        fileChooser.addChoosableFileFilter(extFilter);

        int n = fileChooser.showSaveDialog(iSCREAM.this);
        if (n == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {

                BufferedWriter writerFunzioni = new BufferedWriter(new FileWriter(fileToSave));
                CSVPrinter csvPrinterFunzioni = new CSVPrinter(writerFunzioni,
                        CSVFormat.DEFAULT.withHeader("Solidity-File", "Contract-Name", "Function-Name", "SLOC",
                                "Avg-Assignment", "Avg-blank-lines", "Avg-commas", "Avg-comments", "Avg-comparisons", "Avg-Identifiers-Length", "Avg-conditionals", "Avg-indentation-length", "Avg-keywords", "Avg-line-length", "Avg-loops",
                                "Avg-number-of-identifiers", "Avg-numbers", "Avg-operators", "Avg-parenthesis", "Avg-periods", "Avg-spaces", "Max-Identifiers-Length", "Max-indentation",
                                "Max-keywords", "Max-line-length", "Max-number-of-identifiers", "Max-numbers", "Max-char", "Max-words").withDelimiter(';'));
                for (Object[] c : t) {
                    csvPrinterFunzioni.printRecord(c);
                    csvPrinterFunzioni.flush();
                }

                JOptionPane.showMessageDialog(this, "SUCCESSFULLY LOADED", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                csvPrinterFunzioni.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "ERROR", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            }

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        clearTable();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int n = fileChooser.showOpenDialog(iSCREAM.this);
        if (n == JFileChooser.APPROVE_OPTION) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            String[] header = {"Solidity-File", "Contract-Name", "Function-Name", "SLOC",
                "Avg-Assignment", "Avg-blank-lines", "Avg-commas", "Avg-comments", "Avg-comparisons", "Avg-Identifiers-Length", "Avg-conditionals", "Avg-indentation-length", "Avg-keywords", "Avg-line-length", "Avg-loops",
                "Avg-number-of-identifiers", "Avg-numbers", "Avg-operators", "Avg-parenthesis", "Avg-periods", "Avg-spaces", "Max-Identifiers-Length", "Max-indentation",
                "Max-keywords", "Max-line-length", "Max-number-of-identifiers", "Max-numbers", "Max-char", "Max-words"};

            model.setColumnIdentifiers(header);
            File f = fileChooser.getSelectedFile();
            File dir = new File(f.getAbsolutePath());
            if (dir.isDirectory()) {
                File[] filesInDir = dir.listFiles();
                Arrays.sort(filesInDir);
                for (File f1 : filesInDir) {
                    if (f1.getName().replace(".", "#").split("#")[1].equalsIgnoreCase("sol")) {
                        try {
                            ArrayList<ArrayList<Object>> row = CalculatorMetrics.metric(f1);

                            for (ArrayList<Object> c : row) {
                                model.addRow(c.toArray());
                                t.add(c.toArray());
                            }

                        } catch (IOException ex) {
                            Logger.getLogger(iSCREAM.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "The file\n" + f1.getName() + "\n has an unacceptable format, it is not parsed.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                if (f.getName().replace(".", "#").split("#")[1].equalsIgnoreCase("sol")) {
                    try {
                        ArrayList<ArrayList<Object>> row = CalculatorMetrics.metric(f);

                        for (ArrayList<Object> c : row) {
                            model.addRow(c.toArray());
                            t.add(c.toArray());
                        }

                    } catch (IOException ex) {
                        Logger.getLogger(iSCREAM.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "The file\n" + f.getName() + "\n has an unacceptable format, it is not parsed.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        clearTable();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int n = fileChooser.showOpenDialog(iSCREAM.this);
        if (n == JFileChooser.APPROVE_OPTION) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            String[] header = {"Solidity-File", "Contract-Name", "Function-Name", "SLOC",
                "Avg-Assignment", "Avg-blank-lines", "Avg-commas", "Avg-comments", "Avg-comparisons", "Avg-Identifiers-Length", "Avg-conditionals", "Avg-indentation-length", "Avg-keywords", "Avg-line-length", "Avg-loops",
                "Avg-number-of-identifiers", "Avg-numbers", "Avg-operators", "Avg-parenthesis", "Avg-periods", "Avg-spaces", "Max-Identifiers-Length", "Max-indentation",
                "Max-keywords", "Max-line-length", "Max-number-of-identifiers", "Max-numbers", "Max-char", "Max-words"};

            model.setColumnIdentifiers(header);
            File f = fileChooser.getSelectedFile();
            File dir = new File(f.getAbsolutePath());
            if (dir.isDirectory()) {
                File[] filesInDir = dir.listFiles();
                Arrays.sort(filesInDir);
                for (File f1 : filesInDir) {
                    if (f1.getName().replace(".", "#").split("#")[1].equalsIgnoreCase("sol")) {
                        try {
                            ArrayList<ArrayList<Object>> row = CalculatorMetrics.metric(f1);

                            for (ArrayList<Object> c : row) {
                                model.addRow(c.toArray());
                                t.add(c.toArray());
                            }

                        } catch (IOException ex) {
                            Logger.getLogger(iSCREAM.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "The file\n" + f1.getName() + "\n has an unacceptable format, it is not parsed.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                if (f.getName().replace(".", "#").split("#")[1].equalsIgnoreCase("sol")) {
                    try {
                        ArrayList<ArrayList<Object>> row = CalculatorMetrics.metric(f);

                        for (ArrayList<Object> c : row) {
                            model.addRow(c.toArray());
                            t.add(c.toArray());
                        }

                    } catch (IOException ex) {
                        Logger.getLogger(iSCREAM.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "The file\n" + f.getName() + "\n has an unacceptable format, it is not parsed.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void clearTable() {
        t = new ArrayList<Object[]>();
        DefaultTableModel m = (DefaultTableModel) jTable1.getModel();
        int v = m.getRowCount();
        for (int i = 1; i <= v; i++) {
            m.removeRow(m.getRowCount() - 1);
        }
        String[] header = {};
        m.setColumnIdentifiers(header);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(iSCREAM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(iSCREAM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(iSCREAM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(iSCREAM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        if (args.length <= 0) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new iSCREAM().setVisible(true);
                }
            });
        } else {

            String pattern = "dd_M_yyyy_HH-mm-ss";
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
            String date = simpleDateFormat.format(new Date());
            File dir = new File(args[1]);
            if (dir.isDirectory()) {
                ArrayList<Object[]> t1 = new ArrayList<Object[]>();
                File[] filesInDir = dir.listFiles();
                Arrays.sort(filesInDir);
                for (File f1 : filesInDir) {
                    if (f1.getName().replace(".", "#").split("#")[1].equalsIgnoreCase("sol")) {
                        try {
                            ArrayList<ArrayList<Object>> row = CalculatorMetrics.metric(f1);

                            for (ArrayList<Object> c : row) {

                                t1.add(c.toArray());
                            }

                        } catch (IOException ex) {
                            Logger.getLogger(iSCREAM.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        BufferedWriter writerFunzioni = new BufferedWriter(new FileWriter(args[3]));
                        CSVPrinter csvPrinterFunzioni = new CSVPrinter(writerFunzioni,
                                CSVFormat.DEFAULT.withHeader("Solidity-File", "Contract-Name", "Function-Name", "SLOC",
                                        "Avg-Assignment", "Avg-blank-lines", "Avg-commas", "Avg-comments", "Avg-comparisons", "Avg-Identifiers-Length", "Avg-conditionals", "Avg-indentation-length", "Avg-keywords", "Avg-line-length", "Avg-loops",
                                        "Avg-number-of-identifiers", "Avg-numbers", "Avg-operators", "Avg-parenthesis", "Avg-periods", "Avg-spaces", "Max-Identifiers-Length", "Max-indentation",
                                        "Max-keywords", "Max-line-length", "Max-number-of-identifiers", "Max-numbers", "Max-char", "Max-words").withDelimiter(';'));
                        for (Object[] c : t1) {
                            csvPrinterFunzioni.printRecord(c);
                            csvPrinterFunzioni.flush();
                        }
                    } else {
                        System.err.println("The file\n" + f1.getName() + "\n has an unacceptable format, it is not parsed.");
                    }
                }
            } else {
                ArrayList<Object[]> t1 = new ArrayList<Object[]>();
                if (dir.getName().replace(".", "#").split("#")[1].equalsIgnoreCase("sol")) {
                    try {
                        ArrayList<ArrayList<Object>> row = CalculatorMetrics.metric(dir);

                        for (ArrayList<Object> c : row) {

                            t1.add(c.toArray());
                        }

                    } catch (IOException ex) {
                        Logger.getLogger(iSCREAM.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    BufferedWriter writerFunzioni = new BufferedWriter(new FileWriter(args[3]));
                    CSVPrinter csvPrinterFunzioni = new CSVPrinter(writerFunzioni,
                            CSVFormat.DEFAULT.withHeader("Solidity-File", "Contract-Name", "Function-Name", "SLOC",
                                    "Avg-Assignment", "Avg-blank-lines", "Avg-commas", "Avg-comments", "Avg-comparisons", "Avg-Identifiers-Length", "Avg-conditionals", "Avg-indentation-length", "Avg-keywords", "Avg-line-length", "Avg-loops",
                                    "Avg-number-of-identifiers", "Avg-numbers", "Avg-operators", "Avg-parenthesis", "Avg-periods", "Avg-spaces", "Max-Identifiers-Length", "Max-indentation",
                                    "Max-keywords", "Max-line-length", "Max-number-of-identifiers", "Max-numbers", "Max-char", "Max-words").withDelimiter(';'));
                    for (Object[] c : t1) {
                        csvPrinterFunzioni.printRecord(c);
                        csvPrinterFunzioni.flush();
                    }
                } else {
                    System.err.println("The file\n" + dir.getName() + "\n has an unacceptable format, it is not parsed.");
                }
            }

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
